{"version":3,"file":"angular-password-strength-meter.js","sources":["ng://angular-password-strength-meter/lib/password-strength-meter.service.ts","ng://angular-password-strength-meter/lib/password-strength-meter.component.ts","ng://angular-password-strength-meter/lib/password-strength-meter.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport * as zxcvbn_ from 'zxcvbn';\r\n\r\nconst zxcvbn = zxcvbn_;\r\n\r\n@Injectable()\r\nexport class PasswordStrengthMeterService {\r\n  constructor() {}\r\n\r\n  /**\r\n   *  this will return the password strength score in number\r\n   *  0 - too guessable\r\n   *  1 - very guessable\r\n   *  2 - somewhat guessable\r\n   *  3 - safely unguessable\r\n   *  4 - very unguessable\r\n   *\r\n   *  @param password - Password\r\n   */\r\n  score(password): number {\r\n    const result = zxcvbn(password);\r\n    return result.score;\r\n  }\r\n\r\n  /**\r\n   * this will return the password strength score with feedback messages\r\n   * return type { score: number; feedback: { suggestions: string[]; warning: string } }\r\n   *\r\n   * @param password - Password\r\n   */\r\n  scoreWithFeedback(password): { score: number; feedback: { suggestions: string[]; warning: string } } {\r\n    const result = zxcvbn(password);\r\n    return { score: result.score, feedback: result.feedback };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { PasswordStrengthMeterService } from './password-strength-meter.service';\r\n\r\n@Component({\r\n  selector: 'password-strength-meter',\r\n  templateUrl: './password-strength-meter.component.html',\r\n  styleUrls: ['./password-strength-meter.component.scss'],\r\n  providers: [PasswordStrengthMeterService]\r\n})\r\nexport class PasswordStrengthMeterComponent implements OnInit, OnChanges {\r\n  @Input() password: string;\r\n\r\n  @Input() minPasswordLength = 8;\r\n\r\n  @Input() enableFeedback = false;\r\n\r\n  @Input() colors: string[] = [];\r\n\r\n  @Output() strengthChange = new EventEmitter<number>();\r\n\r\n  passwordStrength: number = null;\r\n\r\n  feedback: { suggestions: string[]; warning: string } = null;\r\n\r\n  private prevPasswordStrength = null;\r\n\r\n  private defaultColours = [\r\n    'darkred',\r\n    'orangered',\r\n    'orange',\r\n    'yellowgreen',\r\n    'green'\r\n  ];\r\n\r\n  constructor(\r\n    private passwordStrengthMeterService: PasswordStrengthMeterService\r\n  ) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.password) {\r\n      this.calculatePasswordStrength();\r\n    }\r\n  }\r\n\r\n  private calculatePasswordStrength() {\r\n    // TODO validation logic optimization\r\n    if (!this.password) {\r\n      this.passwordStrength = null;\r\n    } else if (this.password && this.password.length < this.minPasswordLength) {\r\n      this.passwordStrength = 0;\r\n    } else {\r\n      if (this.enableFeedback) {\r\n        const result = this.passwordStrengthMeterService.scoreWithFeedback(\r\n          this.password\r\n        );\r\n        this.passwordStrength = result.score;\r\n        this.feedback = result.feedback;\r\n      } else {\r\n        this.passwordStrength = this.passwordStrengthMeterService.score(\r\n          this.password\r\n        );\r\n        this.feedback = null;\r\n      }\r\n    }\r\n\r\n    // Only emit the passwordStrength if it changed\r\n    if (this.prevPasswordStrength !== this.passwordStrength) {\r\n      this.strengthChange.emit(this.passwordStrength);\r\n      this.prevPasswordStrength = this.passwordStrength;\r\n    }\r\n  }\r\n\r\n  getMeterFillColor(strength) {\r\n    if (!strength || strength < 0 || strength > 5) {\r\n      return this.colors[0] ? this.colors[0] : this.defaultColours[0];\r\n    }\r\n\r\n    return this.colors[strength]\r\n      ? this.colors[strength]\r\n      : this.defaultColours[strength];\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { PasswordStrengthMeterComponent } from './password-strength-meter.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [PasswordStrengthMeterComponent],\r\n  exports: [PasswordStrengthMeterComponent]\r\n})\r\nexport class PasswordStrengthMeterModule {}\r\n"],"names":[],"mappings":"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"}