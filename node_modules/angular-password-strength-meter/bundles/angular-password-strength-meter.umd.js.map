{"version":3,"file":"angular-password-strength-meter.umd.js","sources":["ng://angular-password-strength-meter/lib/password-strength-meter.service.ts","ng://angular-password-strength-meter/lib/password-strength-meter.component.ts","ng://angular-password-strength-meter/lib/password-strength-meter.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport * as zxcvbn_ from 'zxcvbn';\r\n\r\nconst zxcvbn = zxcvbn_;\r\n\r\n@Injectable()\r\nexport class PasswordStrengthMeterService {\r\n  constructor() {}\r\n\r\n  /**\r\n   *  this will return the password strength score in number\r\n   *  0 - too guessable\r\n   *  1 - very guessable\r\n   *  2 - somewhat guessable\r\n   *  3 - safely unguessable\r\n   *  4 - very unguessable\r\n   *\r\n   *  @param password - Password\r\n   */\r\n  score(password): number {\r\n    const result = zxcvbn(password);\r\n    return result.score;\r\n  }\r\n\r\n  /**\r\n   * this will return the password strength score with feedback messages\r\n   * return type { score: number; feedback: { suggestions: string[]; warning: string } }\r\n   *\r\n   * @param password - Password\r\n   */\r\n  scoreWithFeedback(password): { score: number; feedback: { suggestions: string[]; warning: string } } {\r\n    const result = zxcvbn(password);\r\n    return { score: result.score, feedback: result.feedback };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { PasswordStrengthMeterService } from './password-strength-meter.service';\r\n\r\n@Component({\r\n  selector: 'password-strength-meter',\r\n  templateUrl: './password-strength-meter.component.html',\r\n  styleUrls: ['./password-strength-meter.component.scss'],\r\n  providers: [PasswordStrengthMeterService]\r\n})\r\nexport class PasswordStrengthMeterComponent implements OnInit, OnChanges {\r\n  @Input() password: string;\r\n\r\n  @Input() minPasswordLength = 8;\r\n\r\n  @Input() enableFeedback = false;\r\n\r\n  @Input() colors: string[] = [];\r\n\r\n  @Output() strengthChange = new EventEmitter<number>();\r\n\r\n  passwordStrength: number = null;\r\n\r\n  feedback: { suggestions: string[]; warning: string } = null;\r\n\r\n  private prevPasswordStrength = null;\r\n\r\n  private defaultColours = [\r\n    'darkred',\r\n    'orangered',\r\n    'orange',\r\n    'yellowgreen',\r\n    'green'\r\n  ];\r\n\r\n  constructor(\r\n    private passwordStrengthMeterService: PasswordStrengthMeterService\r\n  ) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.password) {\r\n      this.calculatePasswordStrength();\r\n    }\r\n  }\r\n\r\n  private calculatePasswordStrength() {\r\n    // TODO validation logic optimization\r\n    if (!this.password) {\r\n      this.passwordStrength = null;\r\n    } else if (this.password && this.password.length < this.minPasswordLength) {\r\n      this.passwordStrength = 0;\r\n    } else {\r\n      if (this.enableFeedback) {\r\n        const result = this.passwordStrengthMeterService.scoreWithFeedback(\r\n          this.password\r\n        );\r\n        this.passwordStrength = result.score;\r\n        this.feedback = result.feedback;\r\n      } else {\r\n        this.passwordStrength = this.passwordStrengthMeterService.score(\r\n          this.password\r\n        );\r\n        this.feedback = null;\r\n      }\r\n    }\r\n\r\n    // Only emit the passwordStrength if it changed\r\n    if (this.prevPasswordStrength !== this.passwordStrength) {\r\n      this.strengthChange.emit(this.passwordStrength);\r\n      this.prevPasswordStrength = this.passwordStrength;\r\n    }\r\n  }\r\n\r\n  getMeterFillColor(strength) {\r\n    if (!strength || strength < 0 || strength > 5) {\r\n      return this.colors[0] ? this.colors[0] : this.defaultColours[0];\r\n    }\r\n\r\n    return this.colors[strength]\r\n      ? this.colors[strength]\r\n      : this.defaultColours[strength];\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { PasswordStrengthMeterComponent } from './password-strength-meter.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [PasswordStrengthMeterComponent],\r\n  exports: [PasswordStrengthMeterComponent]\r\n})\r\nexport class PasswordStrengthMeterModule {}\r\n"],"names":["Injectable","EventEmitter","Component","Input","Output","NgModule","CommonModule"],"mappings":"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"}