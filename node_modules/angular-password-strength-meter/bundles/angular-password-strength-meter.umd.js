(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('zxcvbn'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-password-strength-meter', ['exports', '@angular/core', 'zxcvbn', '@angular/common'], factory) :
    (global = global || self, factory(global['angular-password-strength-meter'] = {}, global.ng.core, global.zxcvbn_, global.ng.common));
}(this, (function (exports, core, zxcvbn_, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/password-strength-meter.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var zxcvbn = zxcvbn_;
    var PasswordStrengthMeterService = /** @class */ (function () {
        function PasswordStrengthMeterService() {
        }
        /**
         *  this will return the password strength score in number
         *  0 - too guessable
         *  1 - very guessable
         *  2 - somewhat guessable
         *  3 - safely unguessable
         *  4 - very unguessable
         *
         *  @param password - Password
         */
        /**
         *  this will return the password strength score in number
         *  0 - too guessable
         *  1 - very guessable
         *  2 - somewhat guessable
         *  3 - safely unguessable
         *  4 - very unguessable
         *
         * @param {?} password - Password
         * @return {?}
         */
        PasswordStrengthMeterService.prototype.score = /**
         *  this will return the password strength score in number
         *  0 - too guessable
         *  1 - very guessable
         *  2 - somewhat guessable
         *  3 - safely unguessable
         *  4 - very unguessable
         *
         * @param {?} password - Password
         * @return {?}
         */
        function (password) {
            /** @type {?} */
            var result = zxcvbn(password);
            return result.score;
        };
        /**
         * this will return the password strength score with feedback messages
         * return type { score: number; feedback: { suggestions: string[]; warning: string } }
         *
         * @param password - Password
         */
        /**
         * this will return the password strength score with feedback messages
         * return type { score: number; feedback: { suggestions: string[]; warning: string } }
         *
         * @param {?} password - Password
         * @return {?}
         */
        PasswordStrengthMeterService.prototype.scoreWithFeedback = /**
         * this will return the password strength score with feedback messages
         * return type { score: number; feedback: { suggestions: string[]; warning: string } }
         *
         * @param {?} password - Password
         * @return {?}
         */
        function (password) {
            /** @type {?} */
            var result = zxcvbn(password);
            return { score: result.score, feedback: result.feedback };
        };
        PasswordStrengthMeterService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        PasswordStrengthMeterService.ctorParameters = function () { return []; };
        return PasswordStrengthMeterService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/password-strength-meter.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PasswordStrengthMeterComponent = /** @class */ (function () {
        function PasswordStrengthMeterComponent(passwordStrengthMeterService) {
            this.passwordStrengthMeterService = passwordStrengthMeterService;
            this.minPasswordLength = 8;
            this.enableFeedback = false;
            this.colors = [];
            this.strengthChange = new core.EventEmitter();
            this.passwordStrength = null;
            this.feedback = null;
            this.prevPasswordStrength = null;
            this.defaultColours = [
                'darkred',
                'orangered',
                'orange',
                'yellowgreen',
                'green'
            ];
        }
        /**
         * @return {?}
         */
        PasswordStrengthMeterComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () { };
        /**
         * @param {?} changes
         * @return {?}
         */
        PasswordStrengthMeterComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.password) {
                this.calculatePasswordStrength();
            }
        };
        /**
         * @private
         * @return {?}
         */
        PasswordStrengthMeterComponent.prototype.calculatePasswordStrength = /**
         * @private
         * @return {?}
         */
        function () {
            // TODO validation logic optimization
            if (!this.password) {
                this.passwordStrength = null;
            }
            else if (this.password && this.password.length < this.minPasswordLength) {
                this.passwordStrength = 0;
            }
            else {
                if (this.enableFeedback) {
                    /** @type {?} */
                    var result = this.passwordStrengthMeterService.scoreWithFeedback(this.password);
                    this.passwordStrength = result.score;
                    this.feedback = result.feedback;
                }
                else {
                    this.passwordStrength = this.passwordStrengthMeterService.score(this.password);
                    this.feedback = null;
                }
            }
            // Only emit the passwordStrength if it changed
            if (this.prevPasswordStrength !== this.passwordStrength) {
                this.strengthChange.emit(this.passwordStrength);
                this.prevPasswordStrength = this.passwordStrength;
            }
        };
        /**
         * @param {?} strength
         * @return {?}
         */
        PasswordStrengthMeterComponent.prototype.getMeterFillColor = /**
         * @param {?} strength
         * @return {?}
         */
        function (strength) {
            if (!strength || strength < 0 || strength > 5) {
                return this.colors[0] ? this.colors[0] : this.defaultColours[0];
            }
            return this.colors[strength]
                ? this.colors[strength]
                : this.defaultColours[strength];
        };
        PasswordStrengthMeterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'password-strength-meter',
                        template: "<div>\r\n  <div class=\"strength-meter\">\r\n    <div class=\"strength-meter-fill\" [style.background]=\"getMeterFillColor(passwordStrength)\" [attr.data-strength]=\"passwordStrength\"></div>\r\n  </div>\r\n  <ng-container *ngIf=\"enableFeedback && feedback\">\r\n    <small class=\"password-feedback\" *ngIf=\"feedback.warning\">\r\n      {{feedback.warning}}\r\n    </small>\r\n    <small class=\"password-suggetion\" *ngIf=\"feedback.suggestions && feedback.suggestions.length > 0\">\r\n      <ng-container *ngFor=\"let suggetion of feedback.suggestions\">{{suggetion}}</ng-container>\r\n    </small>\r\n  </ng-container>\r\n</div>\r\n",
                        providers: [PasswordStrengthMeterService],
                        styles: [".strength-meter{position:relative;height:3px;background:#ddd;margin:10px auto;border-radius:3px}.strength-meter:after,.strength-meter:before{content:\"\";height:inherit;background:0 0;display:block;border-color:#fff;border-style:solid;border-width:0 5px;position:absolute;width:calc(((100% - 20px)/ 5) + 10px);z-index:10}.strength-meter:before{left:calc((100% - 20px)/ 5)}.strength-meter:after{right:calc((100% - 20px)/ 5)}.strength-meter-fill{background:0 0;height:inherit;position:absolute;width:0;border-radius:inherit;transition:width .5s ease-in-out,background .25s}.strength-meter-fill[data-strength=\"0\"]{background:#8b0000;width:20%}.strength-meter-fill[data-strength=\"1\"]{background:#ff4500;width:40%}.strength-meter-fill[data-strength=\"2\"]{background:orange;width:60%}.strength-meter-fill[data-strength=\"3\"]{background:#9acd32;width:80%}.strength-meter-fill[data-strength=\"4\"]{background:green;width:100%}.password-feedback,.password-suggetion{font-size:70%;font-weight:400;color:#6c757d!important;display:inline-block;margin-top:.25rem}"]
                    }] }
        ];
        /** @nocollapse */
        PasswordStrengthMeterComponent.ctorParameters = function () { return [
            { type: PasswordStrengthMeterService }
        ]; };
        PasswordStrengthMeterComponent.propDecorators = {
            password: [{ type: core.Input }],
            minPasswordLength: [{ type: core.Input }],
            enableFeedback: [{ type: core.Input }],
            colors: [{ type: core.Input }],
            strengthChange: [{ type: core.Output }]
        };
        return PasswordStrengthMeterComponent;
    }());
    if (false) {
        /** @type {?} */
        PasswordStrengthMeterComponent.prototype.password;
        /** @type {?} */
        PasswordStrengthMeterComponent.prototype.minPasswordLength;
        /** @type {?} */
        PasswordStrengthMeterComponent.prototype.enableFeedback;
        /** @type {?} */
        PasswordStrengthMeterComponent.prototype.colors;
        /** @type {?} */
        PasswordStrengthMeterComponent.prototype.strengthChange;
        /** @type {?} */
        PasswordStrengthMeterComponent.prototype.passwordStrength;
        /** @type {?} */
        PasswordStrengthMeterComponent.prototype.feedback;
        /**
         * @type {?}
         * @private
         */
        PasswordStrengthMeterComponent.prototype.prevPasswordStrength;
        /**
         * @type {?}
         * @private
         */
        PasswordStrengthMeterComponent.prototype.defaultColours;
        /**
         * @type {?}
         * @private
         */
        PasswordStrengthMeterComponent.prototype.passwordStrengthMeterService;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/password-strength-meter.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PasswordStrengthMeterModule = /** @class */ (function () {
        function PasswordStrengthMeterModule() {
        }
        PasswordStrengthMeterModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [PasswordStrengthMeterComponent],
                        exports: [PasswordStrengthMeterComponent]
                    },] }
        ];
        return PasswordStrengthMeterModule;
    }());

    exports.PasswordStrengthMeterComponent = PasswordStrengthMeterComponent;
    exports.PasswordStrengthMeterModule = PasswordStrengthMeterModule;
    exports.PasswordStrengthMeterService = PasswordStrengthMeterService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-password-strength-meter.umd.js.map
