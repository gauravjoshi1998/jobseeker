/**
 * @fileoverview added by tsickle
 * Generated from: lib/password-strength-meter.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { PasswordStrengthMeterService } from './password-strength-meter.service';
export class PasswordStrengthMeterComponent {
    /**
     * @param {?} passwordStrengthMeterService
     */
    constructor(passwordStrengthMeterService) {
        this.passwordStrengthMeterService = passwordStrengthMeterService;
        this.minPasswordLength = 8;
        this.enableFeedback = false;
        this.colors = [];
        this.strengthChange = new EventEmitter();
        this.passwordStrength = null;
        this.feedback = null;
        this.prevPasswordStrength = null;
        this.defaultColours = [
            'darkred',
            'orangered',
            'orange',
            'yellowgreen',
            'green'
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.password) {
            this.calculatePasswordStrength();
        }
    }
    /**
     * @private
     * @return {?}
     */
    calculatePasswordStrength() {
        // TODO validation logic optimization
        if (!this.password) {
            this.passwordStrength = null;
        }
        else if (this.password && this.password.length < this.minPasswordLength) {
            this.passwordStrength = 0;
        }
        else {
            if (this.enableFeedback) {
                /** @type {?} */
                const result = this.passwordStrengthMeterService.scoreWithFeedback(this.password);
                this.passwordStrength = result.score;
                this.feedback = result.feedback;
            }
            else {
                this.passwordStrength = this.passwordStrengthMeterService.score(this.password);
                this.feedback = null;
            }
        }
        // Only emit the passwordStrength if it changed
        if (this.prevPasswordStrength !== this.passwordStrength) {
            this.strengthChange.emit(this.passwordStrength);
            this.prevPasswordStrength = this.passwordStrength;
        }
    }
    /**
     * @param {?} strength
     * @return {?}
     */
    getMeterFillColor(strength) {
        if (!strength || strength < 0 || strength > 5) {
            return this.colors[0] ? this.colors[0] : this.defaultColours[0];
        }
        return this.colors[strength]
            ? this.colors[strength]
            : this.defaultColours[strength];
    }
}
PasswordStrengthMeterComponent.decorators = [
    { type: Component, args: [{
                selector: 'password-strength-meter',
                template: "<div>\r\n  <div class=\"strength-meter\">\r\n    <div class=\"strength-meter-fill\" [style.background]=\"getMeterFillColor(passwordStrength)\" [attr.data-strength]=\"passwordStrength\"></div>\r\n  </div>\r\n  <ng-container *ngIf=\"enableFeedback && feedback\">\r\n    <small class=\"password-feedback\" *ngIf=\"feedback.warning\">\r\n      {{feedback.warning}}\r\n    </small>\r\n    <small class=\"password-suggetion\" *ngIf=\"feedback.suggestions && feedback.suggestions.length > 0\">\r\n      <ng-container *ngFor=\"let suggetion of feedback.suggestions\">{{suggetion}}</ng-container>\r\n    </small>\r\n  </ng-container>\r\n</div>\r\n",
                providers: [PasswordStrengthMeterService],
                styles: [".strength-meter{position:relative;height:3px;background:#ddd;margin:10px auto;border-radius:3px}.strength-meter:after,.strength-meter:before{content:\"\";height:inherit;background:0 0;display:block;border-color:#fff;border-style:solid;border-width:0 5px;position:absolute;width:calc(((100% - 20px)/ 5) + 10px);z-index:10}.strength-meter:before{left:calc((100% - 20px)/ 5)}.strength-meter:after{right:calc((100% - 20px)/ 5)}.strength-meter-fill{background:0 0;height:inherit;position:absolute;width:0;border-radius:inherit;transition:width .5s ease-in-out,background .25s}.strength-meter-fill[data-strength=\"0\"]{background:#8b0000;width:20%}.strength-meter-fill[data-strength=\"1\"]{background:#ff4500;width:40%}.strength-meter-fill[data-strength=\"2\"]{background:orange;width:60%}.strength-meter-fill[data-strength=\"3\"]{background:#9acd32;width:80%}.strength-meter-fill[data-strength=\"4\"]{background:green;width:100%}.password-feedback,.password-suggetion{font-size:70%;font-weight:400;color:#6c757d!important;display:inline-block;margin-top:.25rem}"]
            }] }
];
/** @nocollapse */
PasswordStrengthMeterComponent.ctorParameters = () => [
    { type: PasswordStrengthMeterService }
];
PasswordStrengthMeterComponent.propDecorators = {
    password: [{ type: Input }],
    minPasswordLength: [{ type: Input }],
    enableFeedback: [{ type: Input }],
    colors: [{ type: Input }],
    strengthChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PasswordStrengthMeterComponent.prototype.password;
    /** @type {?} */
    PasswordStrengthMeterComponent.prototype.minPasswordLength;
    /** @type {?} */
    PasswordStrengthMeterComponent.prototype.enableFeedback;
    /** @type {?} */
    PasswordStrengthMeterComponent.prototype.colors;
    /** @type {?} */
    PasswordStrengthMeterComponent.prototype.strengthChange;
    /** @type {?} */
    PasswordStrengthMeterComponent.prototype.passwordStrength;
    /** @type {?} */
    PasswordStrengthMeterComponent.prototype.feedback;
    /**
     * @type {?}
     * @private
     */
    PasswordStrengthMeterComponent.prototype.prevPasswordStrength;
    /**
     * @type {?}
     * @private
     */
    PasswordStrengthMeterComponent.prototype.defaultColours;
    /**
     * @type {?}
     * @private
     */
    PasswordStrengthMeterComponent.prototype.passwordStrengthMeterService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1wYXNzd29yZC1zdHJlbmd0aC1tZXRlci8iLCJzb3VyY2VzIjpbImxpYi9wYXNzd29yZC1zdHJlbmd0aC1tZXRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULEtBQUssRUFHTCxNQUFNLEVBQ04sWUFBWSxFQUNiLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBUWpGLE1BQU0sT0FBTyw4QkFBOEI7Ozs7SUF5QnpDLFlBQ1UsNEJBQTBEO1FBQTFELGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBOEI7UUF2QjNELHNCQUFpQixHQUFHLENBQUMsQ0FBQztRQUV0QixtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUV2QixXQUFNLEdBQWEsRUFBRSxDQUFDO1FBRXJCLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUV0RCxxQkFBZ0IsR0FBVyxJQUFJLENBQUM7UUFFaEMsYUFBUSxHQUErQyxJQUFJLENBQUM7UUFFcEQseUJBQW9CLEdBQUcsSUFBSSxDQUFDO1FBRTVCLG1CQUFjLEdBQUc7WUFDdkIsU0FBUztZQUNULFdBQVc7WUFDWCxRQUFRO1lBQ1IsYUFBYTtZQUNiLE9BQU87U0FDUixDQUFDO0lBSUMsQ0FBQzs7OztJQUVKLFFBQVEsS0FBSSxDQUFDOzs7OztJQUViLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDcEIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7U0FDbEM7SUFDSCxDQUFDOzs7OztJQUVPLHlCQUF5QjtRQUMvQixxQ0FBcUM7UUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztTQUM5QjthQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDekUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQztTQUMzQjthQUFNO1lBQ0wsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFOztzQkFDakIsTUFBTSxHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxpQkFBaUIsQ0FDaEUsSUFBSSxDQUFDLFFBQVEsQ0FDZDtnQkFDRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO2FBQ2pDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsS0FBSyxDQUM3RCxJQUFJLENBQUMsUUFBUSxDQUNkLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7YUFDdEI7U0FDRjtRQUVELCtDQUErQztRQUMvQyxJQUFJLElBQUksQ0FBQyxvQkFBb0IsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDdkQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztTQUNuRDtJQUNILENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsUUFBUTtRQUN4QixJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsR0FBRyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRTtZQUM3QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakU7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQzFCLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUN2QixDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7WUEvRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLDBvQkFBdUQ7Z0JBRXZELFNBQVMsRUFBRSxDQUFDLDRCQUE0QixDQUFDOzthQUMxQzs7OztZQVBRLDRCQUE0Qjs7O3VCQVNsQyxLQUFLO2dDQUVMLEtBQUs7NkJBRUwsS0FBSztxQkFFTCxLQUFLOzZCQUVMLE1BQU07Ozs7SUFSUCxrREFBMEI7O0lBRTFCLDJEQUErQjs7SUFFL0Isd0RBQWdDOztJQUVoQyxnREFBK0I7O0lBRS9CLHdEQUFzRDs7SUFFdEQsMERBQWdDOztJQUVoQyxrREFBNEQ7Ozs7O0lBRTVELDhEQUFvQzs7Ozs7SUFFcEMsd0RBTUU7Ozs7O0lBR0Esc0VBQWtFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgT25Jbml0LFxyXG4gIElucHV0LFxyXG4gIE9uQ2hhbmdlcyxcclxuICBTaW1wbGVDaGFuZ2VzLFxyXG4gIE91dHB1dCxcclxuICBFdmVudEVtaXR0ZXJcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFBhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2UgfSBmcm9tICcuL3Bhc3N3b3JkLXN0cmVuZ3RoLW1ldGVyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdwYXNzd29yZC1zdHJlbmd0aC1tZXRlcicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3Bhc3N3b3JkLXN0cmVuZ3RoLW1ldGVyLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9wYXNzd29yZC1zdHJlbmd0aC1tZXRlci5jb21wb25lbnQuc2NzcyddLFxyXG4gIHByb3ZpZGVyczogW1Bhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2VdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQYXNzd29yZFN0cmVuZ3RoTWV0ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcbiAgQElucHV0KCkgcGFzc3dvcmQ6IHN0cmluZztcclxuXHJcbiAgQElucHV0KCkgbWluUGFzc3dvcmRMZW5ndGggPSA4O1xyXG5cclxuICBASW5wdXQoKSBlbmFibGVGZWVkYmFjayA9IGZhbHNlO1xyXG5cclxuICBASW5wdXQoKSBjb2xvcnM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gIEBPdXRwdXQoKSBzdHJlbmd0aENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xyXG5cclxuICBwYXNzd29yZFN0cmVuZ3RoOiBudW1iZXIgPSBudWxsO1xyXG5cclxuICBmZWVkYmFjazogeyBzdWdnZXN0aW9uczogc3RyaW5nW107IHdhcm5pbmc6IHN0cmluZyB9ID0gbnVsbDtcclxuXHJcbiAgcHJpdmF0ZSBwcmV2UGFzc3dvcmRTdHJlbmd0aCA9IG51bGw7XHJcblxyXG4gIHByaXZhdGUgZGVmYXVsdENvbG91cnMgPSBbXHJcbiAgICAnZGFya3JlZCcsXHJcbiAgICAnb3JhbmdlcmVkJyxcclxuICAgICdvcmFuZ2UnLFxyXG4gICAgJ3llbGxvd2dyZWVuJyxcclxuICAgICdncmVlbidcclxuICBdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcGFzc3dvcmRTdHJlbmd0aE1ldGVyU2VydmljZTogUGFzc3dvcmRTdHJlbmd0aE1ldGVyU2VydmljZVxyXG4gICkge31cclxuXHJcbiAgbmdPbkluaXQoKSB7fVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoY2hhbmdlcy5wYXNzd29yZCkge1xyXG4gICAgICB0aGlzLmNhbGN1bGF0ZVBhc3N3b3JkU3RyZW5ndGgoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2FsY3VsYXRlUGFzc3dvcmRTdHJlbmd0aCgpIHtcclxuICAgIC8vIFRPRE8gdmFsaWRhdGlvbiBsb2dpYyBvcHRpbWl6YXRpb25cclxuICAgIGlmICghdGhpcy5wYXNzd29yZCkge1xyXG4gICAgICB0aGlzLnBhc3N3b3JkU3RyZW5ndGggPSBudWxsO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLnBhc3N3b3JkICYmIHRoaXMucGFzc3dvcmQubGVuZ3RoIDwgdGhpcy5taW5QYXNzd29yZExlbmd0aCkge1xyXG4gICAgICB0aGlzLnBhc3N3b3JkU3RyZW5ndGggPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHRoaXMuZW5hYmxlRmVlZGJhY2spIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnBhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2Uuc2NvcmVXaXRoRmVlZGJhY2soXHJcbiAgICAgICAgICB0aGlzLnBhc3N3b3JkXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnBhc3N3b3JkU3RyZW5ndGggPSByZXN1bHQuc2NvcmU7XHJcbiAgICAgICAgdGhpcy5mZWVkYmFjayA9IHJlc3VsdC5mZWVkYmFjaztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnBhc3N3b3JkU3RyZW5ndGggPSB0aGlzLnBhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2Uuc2NvcmUoXHJcbiAgICAgICAgICB0aGlzLnBhc3N3b3JkXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmZlZWRiYWNrID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIE9ubHkgZW1pdCB0aGUgcGFzc3dvcmRTdHJlbmd0aCBpZiBpdCBjaGFuZ2VkXHJcbiAgICBpZiAodGhpcy5wcmV2UGFzc3dvcmRTdHJlbmd0aCAhPT0gdGhpcy5wYXNzd29yZFN0cmVuZ3RoKSB7XHJcbiAgICAgIHRoaXMuc3RyZW5ndGhDaGFuZ2UuZW1pdCh0aGlzLnBhc3N3b3JkU3RyZW5ndGgpO1xyXG4gICAgICB0aGlzLnByZXZQYXNzd29yZFN0cmVuZ3RoID0gdGhpcy5wYXNzd29yZFN0cmVuZ3RoO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0TWV0ZXJGaWxsQ29sb3Ioc3RyZW5ndGgpIHtcclxuICAgIGlmICghc3RyZW5ndGggfHwgc3RyZW5ndGggPCAwIHx8IHN0cmVuZ3RoID4gNSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jb2xvcnNbMF0gPyB0aGlzLmNvbG9yc1swXSA6IHRoaXMuZGVmYXVsdENvbG91cnNbMF07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuY29sb3JzW3N0cmVuZ3RoXVxyXG4gICAgICA/IHRoaXMuY29sb3JzW3N0cmVuZ3RoXVxyXG4gICAgICA6IHRoaXMuZGVmYXVsdENvbG91cnNbc3RyZW5ndGhdO1xyXG4gIH1cclxufVxyXG4iXX0=